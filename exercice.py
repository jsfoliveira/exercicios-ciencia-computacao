# üöÄ Exerc√≠cio 1: Crie uma fun√ß√£o que receba dois n√∫meros e retorne o maior deles.
def twoNumber(a, b):
    if a > b:
        return a
    else:
        return b

twoNumber(2,4)
# üöÄ Exerc√≠cio 2: Calcule a m√©dia aritm√©tica dos valores contidos em uma lista.
def mediaAritmetica(list):
    soma = sum(list)
    lengthArray = len(list)
    media = soma / lengthArray
    return media

mediaAritmetica([1,2,3])

# Exerc√≠cio 3: Fa√ßa um programa que, dado um valor n qualquer, tal que n > 1, imprima na tela um quadrado feito de asteriscos de lado de tamanho n. Por exemplo:
# ü¶úDica: Python sabe multiplicar sequ√™ncias! Por exemplo, 3 * 'bla' resulta em blablabla. Isso se aplica a listas tamb√©m, caso voc√™ precise.
# Sentiu a√≠ um certo dejavu? üòÅ
def draw_square(n):
    for row in range(n):
        print(n * '*')
draw_square(10)

# üöÄ Exerc√≠cio 4: Crie uma fun√ß√£o que receba uma lista de nomes e retorne o nome com a maior quantidade de caracteres. Por exemplo, para ["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"], o retorno deve ser "Fernanda".
# ü¶ú Uma dica: Utilize a fun√ß√£o len() para verificar o tamanho do nome.
def maiorNome(listName):
    biggest_name = listName[0]
    for name in listName:
      if len(name) > len(biggest_name):
        biggest_name = name
    return biggest_name

maiorNome(["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"])

# Exerc√≠cio 5: Considere que a cobertura da tinta √© de 1 litro para cada 3 metros quadrados e que a tinta √© vendida em latas de 18 litros, que custam R$ 80,00. Crie uma fun√ß√£o que retorne dois valores em uma tupla contendo a quantidade de latas de tinta a serem compradas e o pre√ßo total a partir do tamanho de uma parede (em m¬≤).
def paint_costs(area):
    can_price = 80
    required_liters = area / 3
    required_cans = required_liters // 18
    if required_liters % 18:
        required_cans += 1
    return required_cans, required_cans * can_price

paint_costs(100)


# Exerc√≠cio 6: Crie uma fun√ß√£o que receba os tr√™s lado de um tri√¢ngulo e informe qual o tipo de tri√¢ngulo formado ou "n√£o √© triangulo", caso n√£o seja poss√≠vel formar um tri√¢ngulo.
def triangleType(a,b,c):
    if a == b == c:
        print('√© tri√¢ngulo equil√°tero')
    elif a == b != c:
        print('√© tri√¢ngulo is√≥celes')
    elif a != b != c:
        print('√© tri√¢ngulo escaleno')
    else:
        print('n√£o √© tri√¢ngulo')

triangleType(2,2,3)